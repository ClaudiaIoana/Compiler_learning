%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include "parser.tab.h"
    int lines = 1;
%}

%option noyywrap
%option caseless

DIGIT [0-9]
NON_ZERO_DIGIT [1-9]
INT_CONSTANT [+-]?{NON_ZERO_DIGIT}{DIGIT}*|0
LETTER [a-zA-Z_]
SPECIAL_CHAR [ ?:*\^+=.!]
STRING_CONSTANT (\"({LETTER}|{DIGIT}|{SPECIAL_CHAR})*\")
IDENTIFIER {LETTER}({LETTER}|{DIGIT})*
BAD_IDENTIFIER ({DIGIT})+({LETTER})+({LETTER}|{DIGIT})*

%%

"deffun" { printf("%s - reserved word\n", yytext); return DEFFUN; }
"int" { printf("%s - reserved word\n", yytext); return INT; }
"str" { printf("%s - reserved word\n", yytext); return STR; }
"char" { printf("%s - reserved word\n", yytext); return CHAR; }
"float" { printf("%s - reserved word\n", yytext); return FLOAT; }
"boolean" { printf("%s - reserved word\n", yytext); return BOOLEAN; }
"list" { printf("%s - reserved word\n", yytext); return LIST; }
"read" { printf("%s - reserved word\n", yytext); return READ; }
"if" { printf("%s - reserved word\n", yytext); return IF; }
"else" { printf("%s - reserved word\n", yytext); return ELSE; }
"write" { printf("%s - reserved word\n", yytext); return WRITE; }
"while" { printf("%s - reserved word\n", yytext); return WHILE; }
"in" { printf("%s - reserved word\n", yytext); return IN; }
"for" { printf("%s - reserved word\n", yytext); return FOR; }
"send_back" { printf("%s - reserved word\n", yytext); return SEND_BACK; }
"main" { printf("%s - reserved word\n", yytext); return MAIN; }
"else_if" { printf("%s - reserved word\n", yytext); return ELSE_IF; }
"interval" { printf("%s - reserved word\n", yytext); return INTERVAL; }
"break" { printf("%s - reserved word\n", yytext); return BREAK; }
"True" { printf("%s - reserved word\n", yytext); return TRUE; }
"False" { printf("%s - reserved word\n", yytext); return FALSE; }
"call_func" { printf("%s - reserved word\n", yytext); return CALL_FUNC; }

"+" { printf("%s - operator\n", yytext); return PLUS; }
"-" { printf("%s - operator\n", yytext); return MINUS; }
"*" { printf("%s - operator\n", yytext); return TIMES; }
"/" { printf("%s - operator\n", yytext); return DIV; }
"<" { printf("%s - operator\n", yytext); return LESS; }
"<=" { printf("%s - operator\n", yytext); return LESSEQ; }
"=" { printf("%s - operator\n", yytext); return EQ; }
">=" { printf("%s - operator\n", yytext); return BIGGEREQ; }
"==" { printf("%s - operator\n", yytext); return EQQ; }
"!=" { printf("%s - operator\n", yytext); return NEQ; }
">" { printf("%s - operator\n", yytext); return BIGGER; }
"and" { printf("%s - operator\n", yytext); return AND; }
"or" { printf("%s - operator\n", yytext); return OR; }
"%" { printf("%s - operator\n", yytext); return MOD; }
"++" { printf("%s - operator\n", yytext); return ADD1; }
"." { printf("%s - operator\n", yytext); return DOT; }

";" { printf("%s - separator\n", yytext); return SEMICOLON; }
"[" { printf("%s - separator\n", yytext); return OPEN; }
"]" { printf("%s - separator\n", yytext); return CLOSE; }
"(" { printf("%s - separator\n", yytext); return BRACKETOPEN; }
")" { printf("%s - separator\n", yytext); return BRACKETCLOSE; }
"," { printf("%s - separator\n", yytext); return COMMA; }
":" { printf("%s - separator\n", yytext); return POINTS; }
"::" { printf("%s - separator\n", yytext); return POINTS2; }

{IDENTIFIER} { printf("%s - identifier\n", yytext); return IDENTIFIER; }

{BAD_IDENTIFIER} { printf("Error at token %s at line %d\n", yytext, lines); return -1; }

{INT_CONSTANT} { printf("%s - integer constant\n", yytext); return INTCONSTANT; }

{STRING_CONSTANT} { printf("%s - string constant\n", yytext); return STRINGCONSTANT; }

[ \t]+ {}

[\n]+ {++lines;}

. {printf("Error at token %s at line %d\n", yytext, lines); exit(1);}

%%