deffun get_min ( int a , int b, int c ) [
    if a <= b and a <= c:
		send_back a
	else_if b <= a and b <= c:
		send_back b
	else:
		send_back c
]
deffun is_prime(int a)[
	for i in interval (2, a-1):
		if a % i == 0:
			send_back False
	send_back True
]
deffun gcd(int a, int b)[
    int result = call_func(get_min(a, b))
    while result > 1:
        if a % result == 0 and b % result == 0:
            break
        result--

    send_back result
]
deffun second_order_eq(int a, int b, int c)[
	float delta = rad(b*b - 4*a*c)
	write :: (-b + delta)/(2*a)
	write :: (-b - delta)/(2*a)

]
deffun cal_sum(list vector)[
	int sum = 0
	for i in vector:
		sum = sum + i
	send_back sum
]
deffun get_max_n(list vector)[
	int max = vector(0)
	for i in vector:
		if i > max:
			max = i
	send_back max

]
deffun get_min_n(list vector)[
	int min = vector(0)
	for i in vector:
		if i < min:
			min = i
	send_back min

]
deffun main[
	int a
	int b
	int c
	read :: a
	read :: b
	read :: c

	write :: call_func(get_min(a, b, c))

	int a
	int b
	int c
	int x
	read :: a :: b
	read :: c

	write :: call_func(is_prime(a))
	write :: call_func(gcd(a, b))
	call_func(second_order_eq(a, b, c))

	int n
	read :: n
	list vector(n)
	for i in interval (0, n-1):
		read :: vector(i)

	write :: call_func(cal_sum(vector))
	write :: call_func(get_max_n(vector))
	write :: call_func(get_min_n(vector))
]